$csv = Import-Csv "C:\Temp\book1.csv"
$creds = Get-Credential
Foreach($l in $csv)
{
$ServiceAccountName=$l.ServiceAccountName
$Password=$l.Password
$Domain=$l.Domain
$Mailbox=$l.Mailbox
$OwnerName=$l.OwnerName
$SQLAccount=$l.SQLAccount
$XCOMAccount=$l.XCOMAccount
$NACAccount=$l.NACAccount
$ServiceAccountDescription=$l.ServiceAccountDescription

$OU = $null
$GroupOU = $null
$T1 = $null
$UPN = $null
$SetPassword = $null
$ServiceAccount = $null
#$server = $null
$ServiceAccountName = $ServiceAccountName.ToUpper()
$GroupName = $ServiceAccountName + "G"
$Notes = "Owner: $OwnerName"

if ($Domain -eq "BC") {

    ($server = "PRODDCS0003.BC.JSPLC.NET") -and ($UPN = "@sainsburys.co.uk") -and ($OU = "OU=Service User Accounts,OU=Administration,OU=Services,DC=BC,DC=JSPLC,DC=NET") -and ($GroupOU = "OU=Service Access Groups,OU=Administration,OU=Services,DC=BC,DC=JSPLC,DC=NET")

}

elseif ($Domain -eq "STBC1") {

    ($server = "SANDDCS0003.stbc1.jstest1.net") -and ($UPN = "@stbc1.jstest1.net") -and
    ($OU = "OU=Service User Accounts,OU=Administration,OU=Services,DC=STBC1,DC=jstest1,DC=net") -and ($GroupOU = "OU=Service Access Groups,OU=Administration,OU=Services,DC=STBC1,DC=jstest1,DC=net")

}

elseif ($Domain -eq "STBC2") {

    ($server = "STD2DCS0005.stbc2.jstest2.net") -and ($UPN = "@stbc2.jstest2.net") -and
    ($OU = "OU=Service User Accounts,OU=Administration,OU=Services,DC=STBC2,DC=jstest2,DC=net") -and ($GroupOU = "OU=Service Access Groups,OU=Administration,OU=Services,DC=STBC2,DC=jstest2,DC=net")

}

elseif ($Domain -eq "STBC3") {

    ($server = "STD3DCS0003.stbc3.jstest3.net") -and ($UPN = "@stbc3.jstest3.net")
    ($OU = "OU=Service User Accounts,OU=Administration,OU=Services,DC=STBC3,DC=jstest3,DC=net") -and ($GroupOU = "OU=Service Access Groups,OU=Administration,OU=Services,DC=STBC3,DC=jstest3,DC=net")

}

<# Removed as dev dc's still on server 2003

elseif ($Domain -eq "DEV")

{

($server = "STEVDC5004D.dev.devjsplc.net") -and ($UPN = "@dev.devjsplc.net")
($OU="OU=Service User Accounts,OU=Administration,OU=Services,DC=dev,DC=devjsplc,DC=net") -and ($GroupOU = "OU=Service Access Groups,OU=Administration,OU=Services,DC=dev,DC=devjsplc,DC=net")

}

#>

# Validates account type as can only answer y to one question

if (($XCOMAccount? -eq "y") -and ($SQLAccount? -eq "y")) {
    Write-Host "Can't be both an XCOM and SQL service account - Stopping script" -foregroundcolor "red"
    pause
    exit
}
else { }

#Carries out extra steps for NAC accounts

if ($NACAccount? -eq "y") {

    # Sets the correct OU for NAC accounts

    if ($Domain -eq "BC") {

        ($OU = "OU=Network Access Control Accounts,OU=Administration,OU=Services,DC=BC,DC=JSPLC,DC=NET")

    }

    elseif ($Domain -eq "STBC2") {

        ($OU = "OU=Network Access Control Accounts,OU=Administration,OU=Services,DC=STBC2,DC=jstest2,DC=net")

    }

    elseif ($Domain -eq "STBC3") {

        ($OU = "OU=Network Access Control Accounts,OU=Administration,OU=Services,DC=STBC3,DC=jstest3,DC=net")

    }

    # Checks password over 24 characters, password length for all service accounts has since been extended 27/10

    if ($Password.Length -lt "24") {

        Write-Host "Password for NAC service accounts must be 24 characters. Exiting script." -foregroundcolor "red"
        pause
        exit

    }

    # Answer an additional question as not all NAC accounts require new groups to be created, some may requrie an existing group to be added to the account

    $NACGroup = Read-Host "Is a new NAC security group required Y/N?"

    if ($NACGroup -eq "y") {

        $GroupName = Read-Host "Enter the name of the new group to be created, this should be provided on the form"
        $GroupName = $GroupName.ToUpper()

    }

    Elseif ($NACGroup -eq "n") {

        $NACGroupName = Read-Host "Enter the name of the existing group the new account should be added to, this should be provided on the form"


    }

    Else {

        Write-Host "Invalid answer. Should be Y/N" -foregroundcolor "red"
        pause
        exit

    }
}


# Checks if account already exists and will stop the script if it does

$ServiceAccount = get-aduser -filter { (name -eq $ServiceAccountName) } -Server $server -Credential $creds -Properties displayname, description | Select-Object displayname, description
if ($ServiceAccount -ne $null) {
    Write-Host "This account already exists in $domain" -foregroundcolor "red"
    $ServiceAccount
    pause
    exit
}

#Checks if group already exists and will stop the script if it does

$Group = get-adgroup -filter { (name -eq $GroupName) } -Server $server -Credential $creds -Properties displayname, description | Select-Object displayname, description
if ($Group -ne $null) {
    Write-Host "This group already exists in $domain" -foregroundcolor "red"
    $Group
    pause
    exit
}

# converts password to secure string

$SetPassword = ConvertTo-SecureString -AsPlainText $Password -Force

# Creates account, setting required notes

New-ADUser -Name $ServiceAccountName -SamAccountName $ServiceAccountName -GivenName $ServiceAccountName -DisplayName $ServiceAccountName -UserPrincipalName ($ServiceAccountName + $UPN) -Description $ServiceAccountDescription -Enabled $true -Path $ou -AccountPassword $SetPassword -ChangePasswordAtLogon $False -PasswordNeverExpires $True -CannotChangePassword $True -Credential $creds -Server $Server
Set-ADUser $ServiceAccountName -add @{info = "$notes" } -Credential $creds -Server $Server

# Applies required set up that is different for each service account type

if ($XCOMAccount? -eq 'y') {

    # Applies the XCOM account account setup

    Add-ADGroupMember -Identity SVCDENYLOGONTSONLY01G -Members $ServiceAccountName -Credential $creds -server $Server
    New-ADGroup -Name $GroupName -GroupScope Global -GroupCategory Security -path $GroupOU -Server $server -Credential $creds -Description "Group to provide permissions to $ServiceAccountName service account"
    Set-ADGroup $GroupName -add @{info = "Owner: $OwnerName" } -Credential $creds -Server $Server
    Add-ADGroupMember -Identity $GroupName -Members $ServiceAccountName -Credential $creds -server $Server
}

elseif ($SQLAccount? -eq 'y') {

    # Applies the SQL service account setup

    Add-ADGroupMember -Identity SVCSQLSERVICE01G -Members $ServiceAccountName -Credential $creds -server $Server
    Add-ADGroupMember -Identity SVCDENYLOGON01G -Members $ServiceAccountName -Credential $creds -server $Server
    Add-ADGroupMember -Identity SVCDENYLOGONTSONLY01G -Members $ServiceAccountName -Credential $creds -server $Server
    $GroupName = $null

}

elseif ($NACAccount? -eq 'y') {

    # Applies the NAC service account setup

    Add-ADGroupMember -Identity SVCDENYLOGON01G -Members $ServiceAccountName -Credential $creds -server $Server
    Add-ADGroupMember -Identity SVCDENYLOGONTSONLY01G -Members $ServiceAccountName -Credential $creds -server $Server

    if ($NACGroup -eq "n") {

        Add-ADGroupMember -Identity $NACGroupName -Members $ServiceAccountName -Credential $creds -server $Server
        $GroupName = $null

    }

    elseif ($NACGroup -eq "y") {

        New-ADGroup -Name $GroupName -GroupScope Global -GroupCategory Security -path $GroupOU -Server $server -Credential $creds -Description "Group to provide permissions to $ServiceAccountName service account"
        Set-ADGroup $GroupName -add @{info = "Owner: $OwnerName" } -Credential $creds -Server $Server
        Add-ADGroupMember -Identity $GroupName -Members $ServiceAccountName -Credential $creds -server $Server

    }

}

else {
    # Applies the default service account setup
    Add-ADGroupMember -Identity SVCDENYLOGON01G -Members $ServiceAccountName -Credential $creds -server $Server
    Add-ADGroupMember -Identity SVCDENYLOGONTSONLY01G -Members $ServiceAccountName -Credential $creds -server $Server
    New-ADGroup -Name $GroupName -GroupScope Global -GroupCategory Security -path $GroupOU -Server $server -Credential $creds -Description "Group to provide permissions to $ServiceAccountName service account"
    Set-ADGroup $GroupName -add @{info = "Owner: $OwnerName" } -Credential $creds -Server $Server
    Add-ADGroupMember -Identity $GroupName -Members $ServiceAccountName -Credential $creds -server $Server
}

}
